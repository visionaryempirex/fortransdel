import React, { useState } from "react";
import {
  FiSettings,
  FiStar,
  FiMessageSquare,
  FiKey,
  FiGlobe,
  FiPackage,
  FiDollarSign,
  FiUsers,
  FiGift,
} from "react-icons/fi";
import "./Settings.css";
import AccountSection from "./AllSettingsPages/Account/Account";
import PrivacySettings from "./AllSettingsPages/Privacy/Privacy";
import DefaultSettings from "./AllSettingsPages/DefaultSetting/DefaultSetting";
import RatingSettings from "./AllSettingsPages/RatingSetting/RatingSetting";
import { UserAuthCheck } from "../UserAuthCheck/UserAuthCheck";

import PageTitle from "../../../layouts/PageTitle";

const AccountSettings = () => {
  const [selectedMenu, setSelectedMenu] = React.useState("Settings");

  function renderSection() {
    if (selectedMenu === "Settings") {
      return <AccountSection />;
    } else if (selectedMenu === "Privacy & GDPR") {
      return <PrivacySettings />;
    } else if (selectedMenu === "Default Setting") {
      return <DefaultSettings />;
    } else if (selectedMenu === "Rating Settings") {
      return <RatingSettings />;
    } else {
      return <div>Select a menu item to view details.</div>;
    }
  }

  const menuItems = [
    { icon: <FiSettings />, label: "Settings" },
    { icon: <FiStar />, label: "Privacy & GDPR" },
    { icon: <FiMessageSquare />, label: "Default Setting" },
    { icon: <FiKey />, label: "Rating Settings" },
    { icon: <FiGlobe />, label: "Custom Domains" },
    { icon: <FiPackage />, label: "Integrations" },
    { icon: <FiKey />, label: "API Keys" },
    { icon: <FiPackage />, label: "Webhooks" },
    { icon: <FiDollarSign />, label: "Plan & Usage" },
    { icon: <FiDollarSign />, label: "Billing" },
    { icon: <FiUsers />, label: "Team Management" },
    { icon: <FiPackage />, label: "Upgrade" },
    { icon: <FiGift />, label: "Referral Program" },
  ];

  return (
    <div>
      <PageTitle activeMenu="Settings" motherMenu="Home" />

      <div className="Account-settings-container">
        <div className="Account-settings-content">
          <div className="Account-settings-main">
            <div className="Account-settings-menu">
              <nav>
                {menuItems.map((item) => (
                  <button
                    key={item.label}
                    onClick={() => setSelectedMenu(item.label)}
                    className={`Account-menu-item ${
                      selectedMenu === item.label ? "Account-active" : ""
                    }`}
                  >
                    <span className="Account-menu-icon">{item.icon}</span>
                    {item.label}
                  </button>
                ))}
              </nav>
            </div>
            <div id="SectionsContainer" className="Account-settings-details">
              {renderSection()}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AccountSettings;

I have a main parent component called Account Settings. Now I want to create a child component for Custom Branding.

Requirements:
Custom Branding should be a new component.

Add a menu item for it in the sidebar/menu (where other account settings items are listed).

In the CustomBranding component:

Add a heading: "Custom Brandings"

Add a description below the heading:
"Create themes with a custom logo, button colors, and company name to use on your interviews."

Add a button: "Create New Branding"

On clicking this button, show a popup/modal.

In the popup, allow the user to:

Enter branding information (company name, button color, etc.)

Upload a logo image
(Design the popup UI exactly like the one I previously provided in the image)

I have already shared my backend setup (user controller, schema, and model). I want to save the branding data for the current logged-in user in the backend.

Deliverables:
Complete code for the parent component (Account Settings) with the new menu item.

Complete code for the child component (Custom Branding) with full UI and functionality.

Integration with the backend to save the branding data for the logged-in user.



