const InterviewModel = require("../../Model/InterviewSchema/InterviewSchema");

async function CreateInterview(req, res) {
  try {
    const body = req.body;

    // 🔍 Log data in terminal (backend console)
    console.log("Frontend sent body:", body);

    // Interview create karo
    const createdInterview = await InterviewModel.create(body);

    // Frontend ko response do (yahan dena zaroori hai warna frontend hang ho jayega
    return res
      .status(201)
      .json({ Message: "Interview Created Successfully", createdInterview });

  } catch (e) {
    console.error("Error:", e);
    return res.status(500).json({ Message: "Server Problem" });
  }
}

async function GetInterviews(req, res) {
  try {
    // Fetch all interviews from the database
    const interviews = await InterviewModel.find();

    // Return the fetched interviews in the response
    return res.status(200).json({
      Message: "All Interviews Fetched Successfully",
      interviews,
    });
  } catch (e) {
    console.error("Error:", e);
    return res.status(500).json({ Message: "Server Problem" });
  }
}


async function GetFilteredInterviews(req, res) {
  try {
    const { interviewIds } = req.body;

    // Fetch only those interviews whose _id exists in interviewIds array
    const interviews = await InterviewModel.find({ _id: { $in: interviewIds } });

    res.status(200).json({Message:"Interviews getted seuccessfully", FilteredInterviews: interviews });
} catch (error) {
    res.status(500).json({ message: "Error fetching interviews", error });
}

}
async function FilterInterviewById(req, res) {
  try {
    const { _id } = req.body;

    if (!_id) {
      return res.status(400).json({ message: "Interview ID is required" });
    }

    // Fetch the interview by ID
    const interview = await InterviewModel.findById(_id);

    if (!interview) {
      return res.status(404).json({ message: "Interview not found" });
    }

    res.status(200).json({
      message: "Interview retrieved successfully",
      interview,
    });
  } catch (error) {
    res.status(500).json({ message: "Error fetching interview", error: error.message });
  }
}

async function DeleteInterview(req, res) {
  try {
    const { _id } = req.body; // Get the ID from the request body

    // Validate ID
    if (!_id) {
      return res.status(400).json({ Message: "Interview ID is required" });
    }

    // Delete the specific interview by ID
    const deletedInterview = await InterviewModel.findByIdAndDelete(_id);

    // Check if the interview was found and deleted
    if (!deletedInterview) {
      return res.status(404).json({ Message: "Interview not found" });
    }

    return res.status(200).json({
      Message: "Interview deleted successfully",
      DeletedInterview: deletedInterview, // Optional: Return the deleted document
    });
  } catch (error) {
    console.error("Error deleting interview:", error);
    return res
      .status(500)
      .json({ Message: "Server problem", Error: error.message });
  }
}

async function GetInterviewsbyEmail(req, res) {
  try {
    const { email } = req.body; // Extract email from request body

    // Validate email
    if (!email) {
      return res.status(400).json({ Message: "Email is required" });
    }

    // Find all interviews matching the email
    const interviews = await InterviewModel.find({ email });

    // Check if any interviews exist
    if (interviews.length === 0) {
      return res.status(404).json({ Message: "No interviews found" });
    }

    return res.status(200).json({
      Message: "Interviews found successfully",
      interviews, // Return all found interviews
    });
  } catch (error) {
    console.error("Error fetching interviews:", error);
    return res.status(500).json({ Message: "Server problem", Error: error.message });
  }
}

const updateInterviewStatus = async (req, res) => {
  try {
    const { _id, Status } = req.body; // Get interview ID and new Status from request body

    if (!_id || !Status) {
      return res.Status(400).json({ message: "Interview ID and Status are required" });
    }

    const updatedInterview = await InterviewModel.findByIdAndUpdate(
      _id,
      { Status },
      { new: true } // Returns the updated document
    );

    if (!updatedInterview) {
      return res.status(404).json({ message: "Interview not found" });
    }

    res.status(200).json({
      message: "Interview Status updated successfully",
      updatedInterview,
    });
  } catch (error) {
    console.error("Error updating interview Status:", error);
    res.status(500).json({ message: "Internal server error", error });
  }
};


async function UpdateInterview(req, res) {
  try {
    const { _id, ...updatedData } = req.body; // Extract _id and the rest of the updated data
    console.log(_id , "id-updatedData")
    console.log(updatedData , "updatedData")
    // Validate ID and updated data
    if (!_id) {
      return res.status(400).json({ Message: "Interview ID is required" });
    }

    // Update the interview by ID with the new data
    const updatedInterview = await InterviewModel.findByIdAndUpdate(
      _id,
      updatedData,
      { new: true } // Returns the updated document
    );

    // Check if the interview was found and updated
    if (!updatedInterview) {
      return res.status(404).json({ Message: "Interview not found" });
    }

    return res.status(200).json({
      Message: "Interview updated successfully",
      UpdatedInterview: updatedInterview, // Return the updated document
    });
  } catch (error) {
    console.error("Error updating interview:", error);
    return res.status(500).json({ Message: "Server problem", Error: error.message });
  }
}

module.exports = { CreateInterview, GetInterviews, DeleteInterview , GetFilteredInterviews , FilterInterviewById , GetInterviewsbyEmail , updateInterviewStatus , UpdateInterview};











const mongoose = require("mongoose");

// Define the Interview Schema
const InterviewSchema = new mongoose.Schema(
  {
    interviewTitle: {
      type: String,
    },
    candidateThinkingTime: {
      type: String,
    },
    candidateMaxAnswerLength: {
      type: String, // Length in seconds
    },
    brandingColorOrLogo: {
      type: String,
    },
    answerRetakesAllowed: {
      type: String, // Number of retakes allowed
    },
    interviewStart: {
      video: { type: String }, // URL or path for the video
      title: { type: String },
      tag: { type: String },
    },
    questions: [
      {
        id: { type: Number, required: true },
        video: { type: String }, // URL or path for the question video
        title: { type: String },
        description: { type: String },
        Timetothink: { type: String }, // Time to think for this specific question
        Timetoanswer: { type: String }, // Time to answer for this specific question
        Retakes: { type: String } // Number of retakes for this specific question
      },
    ],
    farewell: {
      id: { type: String },
      video: { type: String }, // URL or path for the video
      title: { type: String },
      description: { type: String },
    },
    email: {
      type: String,
      required: true,
    },
    Status: {
      type: String,
    },
  },
  {
    timestamps: true, // Automatically add createdAt and updatedAt timestamps
  }
);

module.exports = mongoose.model("Interview", InterviewSchema);










const express = require("express");
const Router = express.Router();
const InterviewController = require("../../Controller/InterviewControllers/InterviewControler");

Router.post("/CreateInterview", InterviewController.CreateInterview);
Router.get("/GetInterviews", InterviewController.GetInterviews);
Router.post("/DeleteInterview", InterviewController.DeleteInterview);
Router.post("/GetFilteredInterviews", InterviewController.GetFilteredInterviews);
Router.post("/FilterInterviewById", InterviewController.FilterInterviewById);
Router.post("/GetInterviewsbyEmail", InterviewController.GetInterviewsbyEmail);
Router.post("/updateInterviewStatus", InterviewController.updateInterviewStatus);
Router.put("/UpdateInterview/:id", InterviewController.UpdateInterview);

module.exports = Router;
