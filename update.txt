
import { useState, useEffect, useRef, useCallback } from "react"
import { useParams } from "react-router-dom"
import { GetInterview } from "../../Services/InterviewService/InterviewService"
import { GetInvites } from "../../Services/GetInviteCandidates/GetInviteCandidates"
import Swal from "sweetalert2"
import withReactContent from "sweetalert2-react-content"
import { UpdateInviteCandidateApi } from "../../Services/GetInviteCandidates/UpdateInviteCandidate/UpdateInviteCandidate"
import axios from "axios"
import interviewcomplete from "../../assets/interviewcomplete.webp"
import {
  Camera,
  Mic,
  Play,
  Square,
  Clock,
  CheckCircle,
  AlertCircle,
  Mail,
  Phone,
  User,
  Video,
  Lightbulb,
  Shield,
  Monitor,
  Volume2,
  RefreshCw,
  Eye,
  Settings,
  Headphones
} from 'lucide-react';
import {
  X
} from 'lucide-react';
const MySwal = withReactContent(Swal)

// Optimized Cloudinary upload with retry mechanism
const uploadToCloudinary = async (file, retries = 3) => {
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      const formData = new FormData()
      formData.append("file", file)
      formData.append("upload_preset", "InterviewVideo")
      formData.append("cloud_name", "dxl1ejhcc")
      formData.append("resource_type", "video")
      formData.append("quality", "auto:low")

      const response = await fetch(`https://api.cloudinary.com/v1_1/dxl1ejhcc/video/upload`, {
        method: "POST",
        body: formData,
      })

      if (!response.ok) {
        throw new Error(`Upload failed: ${response.status}`)
      }

      const data = await response.json()
      return data.secure_url
    } catch (error) {
      console.error(`Upload attempt ${attempt} failed:`, error)
      if (attempt === retries) {
        throw new Error("Failed to upload video after multiple attempts")
      }
      await new Promise((resolve) => setTimeout(resolve, Math.pow(2, attempt) * 1000))
    }
  }
}

// Email Verification Modal Component
function EmailVerificationModal({ isOpen, onClose, onVerify, inviteEmail }) {
  const [email, setEmail] = useState("")
  const [error, setError] = useState("")
  const [isLoading, setIsLoading] = useState(false)

  const handleSubmit = async (e) => {
    e.preventDefault()
    setError("")
    setIsLoading(true)

    if (!email) {
      setError("Please enter an email address!")
      setIsLoading(false)
      return
    }

    if (!/\S+@\S+\.\S+/.test(email)) {
      setError("Please enter a valid email address!")
      setIsLoading(false)
      return
    }

    const isValid = onVerify(email)

    if (!isValid) {
      setError("Email does not match the invited email!")
      setIsLoading(false)
      return
    }

    setIsLoading(false)
  }

  if (!isOpen) return null

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/60 backdrop-blur-sm p-4">
      <div className="bg-white rounded-3xl shadow-2xl max-w-md w-full overflow-hidden transform transition-all duration-300 scale-100">
        <div className="bg-gradient-to-r from-blue-600 to-indigo-600 p-6 text-center">
          <div className="w-20 h-20 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4">
            <Mail className="w-10 h-10 text-white" />
          </div>
          <h2 className="text-2xl font-bold text-white mb-2">Verify Your Email</h2>
          <p className="text-blue-100 text-sm">Enter the email address from your interview invitation</p>
        </div>

        <div className="p-6">
          <form onSubmit={handleSubmit} className="space-y-5">
            <div>
              <label htmlFor="email" className="block text-sm font-semibold text-gray-700 mb-2">
                Email Address
              </label>
              <input
                type="email"
                id="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 text-gray-700"
                placeholder="your.email@company.com"
                disabled={isLoading}
              />
              {error && (
                <div className="mt-2 p-2 bg-red-50 border border-red-200 rounded-lg">
                  <p className="text-sm text-red-600 flex items-center">
                    <AlertCircle className="w-4 h-4 mr-2" />
                    {error}
                  </p>
                </div>
              )}
            </div>

            <button
              type="submit"
              disabled={isLoading}
              className="w-full py-3 px-4 bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white font-semibold rounded-xl transition-all duration-200 flex items-center justify-center disabled:opacity-50 disabled:cursor-not-allowed shadow-lg"
            >
              {isLoading ? (
                <>
                  <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></div>
                  Verifying...
                </>
              ) : (
                <>
                  <Shield className="w-5 h-5 mr-2" />
                  Verify Identity
                </>
              )}
            </button>
          </form>

          <div className="mt-6 p-4 bg-gray-50 rounded-xl">
            <div className="flex items-start">
              <Shield className="w-5 h-5 text-gray-400 mt-0.5 mr-3 flex-shrink-0" />
              <div>
                <p className="text-sm font-semibold text-gray-800 mb-1">Security Notice</p>
                <p className="text-xs text-gray-600">
                  This verification ensures only invited candidates can access the interview.
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

// Enhanced Device Selection Modal Component
function DeviceSelectionModal({ isOpen, onClose, onDevicesSelected }) {
  const [devices, setDevices] = useState([]);
  const [selectedCamera, setSelectedCamera] = useState("");
  const [selectedMicrophone, setSelectedMicrophone] = useState("");
  const [selectedSpeaker, setSelectedSpeaker] = useState("");
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState("");
  const [stream, setStream] = useState(null);
  const [isTestingDevices, setIsTestingDevices] = useState(false);
  const [audioLevel, setAudioLevel] = useState(0);
  const videoRef = useRef(null);
  const audioContextRef = useRef(null);
  const analyserRef = useRef(null);
  const animationFrameRef = useRef(null);

  useEffect(() => {
    if (isOpen) {
      loadDevices();
    }
    return () => {
      cleanup();
    };
  }, [isOpen]);

  const cleanup = () => {
    if (stream) {
      stream.getTracks().forEach(track => track.stop());
    }
    if (audioContextRef.current) {
      audioContextRef.current.close();
    }
    if (animationFrameRef.current) {
      cancelAnimationFrame(animationFrameRef.current);
    }
  };

  const loadDevices = async () => {
    try {
      setIsLoading(true);
      setError("");
      // Request permissions first
      await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
      const deviceList = await navigator.mediaDevices.enumerateDevices();
      const cameras = deviceList.filter(device => device.kind === 'videoinput');
      const microphones = deviceList.filter(device => device.kind === 'audioinput');
      const speakers = deviceList.filter(device => device.kind === 'audiooutput');
      if (cameras.length === 0 || microphones.length === 0) {
        throw new Error("No camera or microphone found. Please connect devices and try again.");
      }
      setDevices(deviceList);
      setSelectedCamera(cameras[0]?.deviceId || "");
      setSelectedMicrophone(microphones[0]?.deviceId || "");
      setSelectedSpeaker(speakers[0]?.deviceId || "");
      setIsLoading(false);
    } catch (err) {
      console.error("Error loading devices:", err);
      setError(err.message || "Failed to access devices. Please check permissions.");
      setIsLoading(false);
    }
  };

  const monitorAudioLevel = (stream) => {
    try {
      const audioContext = new (window.AudioContext || window.webkitAudioContext)();
      const analyser = audioContext.createAnalyser();
      const microphone = audioContext.createMediaStreamSource(stream);
      const dataArray = new Uint8Array(analyser.frequencyBinCount);
      microphone.connect(analyser);
      analyser.fftSize = 256;
      audioContextRef.current = audioContext;
      analyserRef.current = analyser;
      const updateAudioLevel = () => {
        analyser.getByteFrequencyData(dataArray);
        const average = dataArray.reduce((a, b) => a + b) / dataArray.length;
        setAudioLevel(Math.min(100, (average / 128) * 100));
        animationFrameRef.current = requestAnimationFrame(updateAudioLevel);
      };
      updateAudioLevel();
    } catch (error) {
      console.error("Error setting up audio monitoring:", error);
    }
  };

  const testDevices = async () => {
    try {
      setIsTestingDevices(true);
      setError("");
      if (stream) {
        stream.getTracks().forEach(track => track.stop());
      }
      const constraints = {
        video: selectedCamera ? { deviceId: { exact: selectedCamera } } : true,
        audio: selectedMicrophone ? { deviceId: { exact: selectedMicrophone } } : true,
      };
      const newStream = await navigator.mediaDevices.getUserMedia(constraints);
      setStream(newStream);
      if (videoRef.current) {
        videoRef.current.srcObject = newStream;
      }
      // Monitor audio levels
      monitorAudioLevel(newStream);
      setIsTestingDevices(false);
    } catch (err) {
      console.error("Error testing devices:", err);
      setError("Failed to test devices. Please check your selections.");
      setIsTestingDevices(false);
    }
  };

  const testSpeaker = async () => {
    try {
      if (selectedSpeaker && videoRef.current) {
        await videoRef.current.setSinkId(selectedSpeaker);
      }
    } catch (error) {
      console.error("Error testing speaker:", error);
    }
  };

  const handleContinue = () => {
    if (selectedCamera && selectedMicrophone) {
      onDevicesSelected({
        camera: selectedCamera,
        microphone: selectedMicrophone,
        speaker: selectedSpeaker,
      });
      cleanup();
      onClose();
      setTimeout(() => {
        setStep(1)
      }, 1000);
    }
  };

  if (!isOpen) return null;

  const cameras = devices.filter(device => device.kind === 'videoinput');
  const microphones = devices.filter(device => device.kind === 'audioinput');
  const speakers = devices.filter(device => device.kind === 'audiooutput');

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/60 backdrop-blur-sm p-4">
      <div className="bg-white rounded-2xl shadow-2xl w-full max-w-2xl mx-4 overflow-hidden transform transition-all duration-300">
        
        {/* Header */}
        <div className="bg-gradient-to-r from-indigo-600 to-purple-600 p-4 text-center relative">
          <button 
            onClick={() => setIsModalOpen(false)}
            className="absolute right-4 top-4 text-white/80 hover:text-white"
          >
            <X className="w-5 h-5" />
          </button>
          <div className="w-12 h-12 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-2">
            <Settings className="w-6 h-6 text-white" />
          </div>
          <h2 className="text-xl font-bold text-white mb-1">Device Setup</h2>
          <p className="text-indigo-100 text-xs">Configure your devices for the interview</p>
        </div>

        {/* Content */}
        <div className="p-4 max-h-96 overflow-y-auto">
          {isLoading ? (
            <div className="flex flex-col items-center justify-center py-8">
              <div className="w-12 h-12 border-4 border-indigo-500 border-t-transparent rounded-full animate-spin mb-4"></div>
              <h3 className="text-lg font-semibold text-gray-800 mb-1">Detecting Devices...</h3>
              <p className="text-gray-600 text-center text-sm">Please allow access when prompted</p>
            </div>
          ) : error ? (
            <div className="flex flex-col items-center justify-center py-8">
              <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mb-4">
                <AlertCircle className="w-8 h-8 text-red-500" />
              </div>
              <h3 className="text-lg font-semibold text-gray-800 mb-2">Device Error</h3>
              <p className="text-gray-600 mb-4 text-center text-sm max-w-xs">{error}</p>
              <button
                onClick={loadDevices}
                className="px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-lg flex items-center text-sm"
              >
                <RefreshCw className="w-4 h-4 mr-2" />
                Try Again
              </button>
            </div>
          ) : (
            <div className="space-y-4">
              
              {/* Device Selection */}
              <div className="space-y-3">
                {/* Camera */}
                <div>
                  <div className="flex items-center space-x-2 mb-2">
                    <div className="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
                      <Camera className="w-4 h-4 text-blue-600" />
                    </div>
                    <span className="font-medium text-gray-800 text-sm">Camera</span>
                  </div>
                  <select
                    value={selectedCamera}
                    onChange={(e) => setSelectedCamera(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  >
                    {cameras.map((camera, index) => (
                      <option key={camera.deviceId} value={camera.deviceId}>
                        {camera.label || `Camera ${index + 1}`}
                      </option>
                    ))}
                  </select>
                </div>

                {/* Microphone */}
                <div>
                  <div className="flex items-center space-x-2 mb-2">
                    <div className="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center">
                      <Mic className="w-4 h-4 text-green-600" />
                    </div>
                    <span className="font-medium text-gray-800 text-sm">Microphone</span>
                  </div>
                  <select
                    value={selectedMicrophone}
                    onChange={(e) => setSelectedMicrophone(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-green-500 focus:border-green-500"
                  >
                    {microphones.map((mic, index) => (
                      <option key={mic.deviceId} value={mic.deviceId}>
                        {mic.label || `Microphone ${index + 1}`}
                      </option>
                    ))}
                  </select>
                </div>

                {/* Speaker */}
                <div>
                  <div className="flex items-center space-x-2 mb-2">
                    <div className="w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center">
                      <Headphones className="w-4 h-4 text-purple-600" />
                    </div>
                    <span className="font-medium text-gray-800 text-sm">Speakers</span>
                  </div>
                  <select
                    value={selectedSpeaker}
                    onChange={(e) => setSelectedSpeaker(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                  >
                    {speakers.length > 0 ? (
                      speakers.map((speaker, index) => (
                        <option key={speaker.deviceId} value={speaker.deviceId}>
                          {speaker.label || `Speaker ${index + 1}`}
                        </option>
                      ))
                    ) : (
                      <option value="">Default System Speaker</option>
                    )}
                  </select>
                </div>
              </div>

              {/* Video Preview */}
              <div className="relative bg-gray-900 rounded-xl overflow-hidden" style={{height: '200px'}}>
                {stream ? (
                  <video
                    ref={videoRef}
                    autoPlay
                    muted
                    playsInline
                    className="w-full h-full object-cover"
                  />
                ) : (
                  <div className="absolute inset-0 flex items-center justify-center bg-gradient-to-br from-gray-800 to-gray-900">
                    <div className="text-center">
                      <Eye className="w-10 h-10 text-gray-400 mx-auto mb-2" />
                      <p className="text-gray-300 text-sm font-medium">Camera Preview</p>
                      <p className="text-gray-400 text-xs">Test devices to see video</p>
                    </div>
                  </div>
                )}

                {stream && (
                  <div className="absolute top-2 left-2 bg-green-500/90 text-white px-2 py-1 rounded text-xs flex items-center">
                    <div className="w-1.5 h-1.5 bg-white rounded-full animate-pulse mr-1"></div>
                    LIVE
                  </div>
                )}
              </div>

              {/* Action Buttons */}
              <div className="flex gap-2">
                <button
                  onClick={testDevices}
                  disabled={isTestingDevices}
                  className="flex-1 py-2 px-4 bg-gray-100 hover:bg-gray-200 text-gray-800 font-medium rounded-lg transition-all duration-200 flex items-center justify-center disabled:opacity-50 text-sm"
                >
                  {isTestingDevices ? (
                    <>
                      <div className="w-4 h-4 border-2 border-gray-400 border-t-transparent rounded-full animate-spin mr-2"></div>
                      Testing...
                    </>
                  ) : (
                    <>
                      <Play className="w-4 h-4 mr-2" />
                      Test
                    </>
                  )}
                </button>

                <button
                  onClick={handleContinue}
                  disabled={!selectedCamera || !selectedMicrophone}
                  className="flex-1 py-2 px-4 bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 text-white font-medium rounded-lg transition-all duration-200 flex items-center justify-center disabled:opacity-50 text-sm"
                >
                  <CheckCircle className="w-4 h-4 mr-2" />
                  Continue
                </button>
              </div>

            </div>
          )}
        </div>
      </div>
    </div>
  );
}


// Recording Modal Component
function RecordingModal({
  isOpen,
  onClose,
  onStopRecording,
  answerTime,
  prepCountdown,
  showPrepCountdown,
  mediaRecorderRef,
  selectedDevices,
}) {
  const videoRef = useRef(null);
  const streamRef = useRef(null);

  useEffect(() => {
    let mounted = true;

    const initializeCamera = async () => {
      if (!isOpen || streamRef.current) return;

      try {
        const constraints = {
          video: {
            width: { ideal: 1280 },
            height: { ideal: 720 },
            frameRate: { ideal: 30 },
            deviceId: selectedDevices?.camera ? { exact: selectedDevices.camera } : undefined,
          },
          audio: {
            echoCancellation: true,
            noiseSuppression: true,
            autoGainControl: true,
            deviceId: selectedDevices?.microphone ? { exact: selectedDevices.microphone } : undefined,
          },
        };

        const mediaStream = await navigator.mediaDevices.getUserMedia(constraints);

        if (!mounted) {
          mediaStream.getTracks().forEach((track) => track.stop());
          return;
        }

        streamRef.current = mediaStream;

        if (videoRef.current) {
          videoRef.current.srcObject = mediaStream;
        }

        if (mediaRecorderRef.current) {
          mediaRecorderRef.current.stream = mediaStream;
        }
      } catch (error) {
        console.error("Error accessing camera:", error);
      }
    };

    if (isOpen) {
      initializeCamera();
    }

    return () => {
      mounted = false;
      if (streamRef.current) {
        streamRef.current.getTracks().forEach((track) => track.stop());
        streamRef.current = null;
      }
    };
  }, [isOpen, selectedDevices]);

  const formatTime = (timeInSeconds) => {
    const minutes = Math.floor(timeInSeconds / 60)
      .toString()
      .padStart(2, "0");
    const seconds = (timeInSeconds % 60).toString().padStart(2, "0");
    return `${minutes}:${seconds}`;
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/70 backdrop-blur-sm p-4">
      <div className="bg-white rounded-3xl shadow-2xl max-w-5xl w-full overflow-hidden transform transition-all duration-300 scale-100">
        <div className="bg-gradient-to-r from-red-600 to-pink-600 p-6">
          <div className="flex items-center justify-between">
            <div>
              <h2 className="text-2xl font-bold text-white">
                {showPrepCountdown ? "Get Ready to Record" : "Recording in Progress"}
              </h2>
              <p className="text-red-100 text-sm mt-1">
                {showPrepCountdown ? "Position yourself and prepare" : "Speak clearly and maintain eye contact"}
              </p>
            </div>
            {!showPrepCountdown && (
              <div className="flex items-center space-x-3 bg-white/20 backdrop-blur-sm px-4 py-2 rounded-xl">
                <div className="w-3 h-3 bg-white rounded-full animate-pulse"></div>
                <span className="text-white font-semibold">{formatTime(answerTime)}</span>
              </div>
            )}
          </div>
        </div>

        <div className="p-6">
          <div className="relative bg-gray-900 rounded-2xl overflow-hidden aspect-video mb-6 shadow-lg">
            <video ref={videoRef} className="w-full h-full object-cover" autoPlay muted playsInline />

            {showPrepCountdown && (
              <div className="absolute inset-0 flex items-center justify-center bg-black/60">
                <div className="text-center">
                  <div className="text-white text-8xl font-bold animate-pulse mb-4">{prepCountdown}</div>
                  <p className="text-white text-xl font-medium">Recording starts in {prepCountdown} seconds</p>
                  <p className="text-gray-300 text-sm mt-2">Make sure you're ready and positioned well</p>
                </div>
              </div>
            )}

            {!showPrepCountdown && (
              <>
                <div className="absolute top-4 right-4 bg-red-500/90 backdrop-blur-sm text-white px-4 py-2 rounded-xl">
                  <div className="flex items-center space-x-2">
                    <div className="w-2 h-2 bg-white rounded-full animate-pulse"></div>
                    <span className="text-sm font-semibold">REC</span>
                  </div>
                </div>

                <div className="absolute bottom-4 left-4 bg-black/60 backdrop-blur-sm text-white px-4 py-2 rounded-xl">
                  <div className="flex items-center space-x-2">
                    <Clock className="w-4 h-4" />
                    <span className="text-sm font-medium">Time Remaining: {formatTime(answerTime)}</span>
                  </div>
                </div>
              </>
            )}
          </div>

          {showPrepCountdown ? (
            <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-2xl p-6">
              <div className="flex items-start">
                <Video className="w-6 h-6 text-blue-600 mt-1 mr-4 flex-shrink-0" />
                <div>
                  <p className="font-semibold text-blue-800 mb-2">Position yourself with good lighting</p>
                  <p className="text-blue-700 text-sm">
                    Recording will start automatically in {prepCountdown} seconds. Make sure you're comfortable and ready to answer.
                  </p>
                </div>
              </div>
            </div>
          ) : (
            <div className="flex flex-col sm:flex-row items-center justify-between gap-4">
              <div className="bg-gradient-to-r from-red-50 to-pink-50 border border-red-200 rounded-2xl p-4 flex-1">
                <div className="flex items-center">
                  <div className="w-12 h-12 rounded-full bg-red-100 flex items-center justify-center mr-4">
                    <div className="w-4 h-4 bg-red-600 rounded-full animate-pulse"></div>
                  </div>
                  <div>
                    <p className="font-semibold text-red-800 text-sm">Recording in progress</p>
                    <p className="text-red-700 text-xs">Speak clearly and maintain eye contact with the camera</p>
                  </div>
                </div>
              </div>

              <button
                onClick={onStopRecording}
                className="px-8 py-3 bg-gradient-to-r from-red-600 to-pink-600 hover:from-red-700 hover:to-pink-700 text-white font-semibold rounded-xl transition-all duration-200 flex items-center shadow-lg"
              >
                <Square className="w-5 h-5 mr-2" />
                Stop Recording
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}

// Retake Confirmation Modal
function RetakeModal({ isOpen, onRetake, onContinue, retakesLeft }) {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/60 backdrop-blur-sm p-4">
      <div className="bg-white rounded-3xl shadow-2xl max-w-md w-full overflow-hidden transform transition-all duration-300 scale-100">
        <div className="bg-gradient-to-r from-green-600 to-blue-600 p-6 text-center">
          <div className="w-20 h-20 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4">
            <RefreshCw className="w-10 h-10 text-white" />
          </div>
          <h2 className="text-2xl font-bold text-white mb-2">Answer Recorded!</h2>
          <p className="text-green-100 text-sm">Would you like to retake this question or continue?</p>
        </div>

        <div className="p-6">
          <div className="text-center mb-6">
            <p className="text-gray-600 mb-2">You have</p>
            <div className="inline-flex items-center px-4 py-2 bg-blue-100 rounded-xl">
              <span className="text-2xl font-bold text-blue-600 mr-2">{retakesLeft}</span>
              <span className="text-blue-600 font-medium">retake{retakesLeft !== 1 ? "s" : ""} remaining</span>
            </div>
          </div>

          <div className="flex space-x-3">
            <button
              onClick={onContinue}
              className="flex-1 py-3 px-4 bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white font-semibold rounded-xl transition-all duration-200 flex items-center justify-center"
            >
              <CheckCircle className="w-5 h-5 mr-2" />
              Continue
            </button>
            <button
              onClick={onRetake}
              className="flex-1 py-3 px-4 bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white font-semibold rounded-xl transition-all duration-200 flex items-center justify-center"
            >
              <RefreshCw className="w-5 h-5 mr-2" />
              Retake
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}

// Alert Modal Component
function AlertModal({ isOpen, onClose, type, title, message, autoClose }) {
  const timeoutRef = useRef(null);
  const progressRef = useRef(null);

  useEffect(() => {
    if (!isOpen) {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
        timeoutRef.current = null;
      }
      return;
    }

    if (autoClose && autoClose > 0) {
      if (progressRef.current) {
        progressRef.current.style.width = "100%";
        progressRef.current.style.animation = `shrink ${autoClose}ms linear forwards`;
      }

      timeoutRef.current = setTimeout(() => {
        onClose();
      }, autoClose);
    }

    return () => {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
        timeoutRef.current = null;
      }
    };
  }, [isOpen, autoClose, onClose]);

  const handleClose = () => {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
      timeoutRef.current = null;
    }
    onClose();
  };

  if (!isOpen) return null;

  const getIcon = () => {
    switch (type) {
      case "success":
        return (
          <div className="w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <CheckCircle className="w-10 h-10 text-green-600" />
          </div>
        )
      case "error":
        return (
          <div className="w-20 h-20 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <AlertCircle className="w-10 h-10 text-red-600" />
          </div>
        )
      case "warning":
        return (
          <div className="w-20 h-20 bg-yellow-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <AlertCircle className="w-10 h-10 text-yellow-600" />
          </div>
        )
      case "info":
      default:
        return (
          <div className="w-20 h-20 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <AlertCircle className="w-10 h-10 text-blue-600" />
          </div>
        )
    }
  };

  const getButtonColor = () => {
    switch (type) {
      case "success":
        return "bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700"
      case "error":
        return "bg-gradient-to-r from-red-600 to-pink-600 hover:from-red-700 hover:to-pink-700"
      case "warning":
        return "bg-gradient-to-r from-yellow-600 to-orange-600 hover:from-yellow-700 hover:to-orange-700"
      case "info":
      default:
        return "bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700"
    }
  };

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/60 backdrop-blur-sm p-4">
      <div className="bg-white rounded-3xl shadow-2xl max-w-md w-full overflow-hidden transform transition-all duration-300 scale-100">
        <div className="p-8">
          <div className="text-center">
            {getIcon()}
            <h2 className="text-2xl font-bold text-gray-800 mb-3">{title}</h2>
            <p className="text-gray-600 mb-6 leading-relaxed">{message}</p>

            {!autoClose && (
              <button
                onClick={handleClose}
                className={`w-full py-3 px-4 text-white font-semibold rounded-xl transition-all duration-200 shadow-lg ${getButtonColor()}`}
              >
                OK
              </button>
            )}

            {autoClose && (
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div
                  ref={progressRef}
                  className="bg-gradient-to-r from-blue-600 to-indigo-600 h-2 rounded-full transition-all duration-100"
                  style={{ width: "100%" }}
                ></div>
              </div>
            )}
          </div>
        </div>
      </div>

      <style jsx>{`
        @keyframes shrink {
          from { width: 100%; }
          to { width: 0%; }
        }
      `}</style>
    </div>
  );
}

// Main Interview Component
export default function GiveInterview() {
  // URL and routing
  const params = useParams()
  const id = params?.id || "4234432829275"
  const [currentUrl, setCurrentUrl] = useState("")

  // Refs for timers and media
  const timerRef = useRef(null)
  const thinkingTimerRef = useRef(null)
  const mediaRecorderRef = useRef(null)
  const videoRef = useRef(null)
  const fullscreenRef = useRef(null)

  // Recording states
  const [isRecording, setIsRecording] = useState(false)
  const [selectedDevices, setSelectedDevices] = useState(null)

  // Modal states
  const [showEmailModal, setShowEmailModal] = useState(false)
  const [showDeviceModal, setShowDeviceModal] = useState(false)
  const [showRecordingModal, setShowRecordingModal] = useState(false)
  const [showAlertModal, setShowAlertModal] = useState(false)
  const [showRetakeModal, setShowRetakeModal] = useState(false)
  const [alertConfig, setAlertConfig] = useState({})

  // Main application states
  const [InterviewId, SetInterviewId] = useState("")
  const [step, setStep] = useState(0)
  const [Invites, setInvites] = useState([])
  const [GiveAnswer, SetGiveAnswer] = useState("open")
  const [SubmittingAnswer, SetSubmittingAnswer] = useState("")
  const [Interview, SetInterview] = useState([])
  const [AnswerArray, SetAnswerArray] = useState([])
  const [WatchIntro, SetWatchIntro] = useState("show")
  const [WatchingIntro, SetWatchingIntro] = useState("")
  const [InterviewStart, SetInterStart] = useState("")
  const [QuesionLength, SetQuesionLength] = useState(0)
  const [isLoading, setIsLoading] = useState(true)

  // Timer and countdown states
  const [countdown, setCountdown] = useState(6)
  const [isCountingDown, setIsCountingDown] = useState(false)
  const [thinkingTime, setThinkingTime] = useState(0)
  const [answerTime, setAnswerTime] = useState(0)
  const [isThinking, setIsThinking] = useState(false)
  const [isAnswering, setIsAnswering] = useState(false)
  const [currentQuestion, setCurrentQuestion] = useState(null)
  const [retakesLeft, setRetakesLeft] = useState(0)
  const [questionStarted, setQuestionStarted] = useState(false)
  const [prepCountdown, setPrepCountdown] = useState(3)
  const [showPrepCountdown, setShowPrepCountdown] = useState(false)
  const [currentRecordedVideo, setCurrentRecordedVideo] = useState(null)

  // Enhanced anti-cheat states
  const [violationCount, setViolationCount] = useState(0)
  const [isFullscreen, setIsFullscreen] = useState(false)
  const [interviewStarted, setInterviewStarted] = useState(false)
  const [violations, setViolations] = useState([])

  // User and branding states
  const [IntUseremail, setIntuserIemail] = useState()
  const [IntUserBrandingId, setIntuserIBrandingId] = useState()
  const [notificationsfromInterview, setNotificationsFromInterview] = useState([])
  const [userEmailTemplateInterviewCompletetion, SetuserEmailTemplateInterviewCompletetion] = useState()
  const [BrandingLogoUrl, SetBrandingLogoUrl] = useState("")
  const [currentInvite, setCurrentInvite] = useState(null)

  // Initialize data from database
  useEffect(() => {
    setCurrentUrl(window.location.href)
    fetchData()
  }, [])

  const fetchData = useCallback(async () => {
    try {
      setIsLoading(true)

      const [invitesData, interviewsData] = await Promise.all([GetInvites(), GetInterview()])

      if (invitesData) {
        setInvites(invitesData.CandidateInvites || [])
        
        // Find matching invite
        const matchedInvite = invitesData.CandidateInvites.find(
          (item) => item.SendingId === id && item.Status === "Invited"
        )

        if (matchedInvite) {
          setCurrentInvite(matchedInvite)
          SetInterviewId(matchedInvite.InterviewId)
          setShowEmailModal(true)
        } else {
          setStep(200)
        }
      }

      if (interviewsData) {
        SetInterview(interviewsData.interviews || [])
      }

      setIsLoading(false)
    } catch (error) {
      console.error("Error fetching data:", error)
      showAlert({
        type: "error",
        title: "Error Loading Data",
        message: "Failed to load interview data. Please refresh the page and try again.",
      })
      setIsLoading(false)
    }
  }, [id])

  // Set question length and notifications
  useEffect(() => {
    Interview.forEach((data) => {
      if (InterviewId === data._id) {
        SetQuesionLength(data.questions.length)
        setNotificationsFromInterview(data?.candidateNotifications || [])
        setIntuserIemail(data.email)
        setIntuserIBrandingId(data.brandingColorOrLogo)
      }
    })
  }, [Interview, InterviewId])

  // Helper function to parse time strings
  const parseTimeToSeconds = useCallback((timeString) => {
    if (!timeString) return 0

    const lowerTime = timeString.toLowerCase()

    if (lowerTime.includes("minute")) {
      const minutes = Number.parseInt(lowerTime.match(/\d+/)?.[0] || "0")
      return minutes * 60
    } else if (lowerTime.includes("second")) {
      const seconds = Number.parseInt(lowerTime.match(/\d+/)?.[0] || "0")
      return seconds
    }

    return Number.parseInt(timeString) || 0
  }, [])

  // Get timing for current question
  const getQuestionTiming = useCallback(
    (questionData, interviewData) => {
      const thinkTime = questionData.Timetothink || interviewData.candidateThinkingTime
      const answerTime = questionData.Timetoanswer || interviewData.candidateMaxAnswerLength
      const retakes = questionData.Retakes || interviewData.answerRetakesAllowed

      return {
        thinkingSeconds: parseTimeToSeconds(thinkTime),
        answerSeconds: parseTimeToSeconds(answerTime),
        retakesAllowed: retakes === "Not Allowed" || retakes === "None" ? 0 : Number.parseInt(retakes) || 0,
      }
    },
    [parseTimeToSeconds],
  )

  // Get user branding data
  useEffect(() => {
    const getCurrentUserData = async () => {
      if (!IntUseremail) return

      try {
        const response = await axios.post("http://localhost:4000/api/users/GetUserByEmail", {
          companyEmail: IntUseremail,
        })

        if (response?.data?.User) {
          // Handle email templates
          notificationsfromInterview.forEach((notification) => {
            if (notification.to === "Interview Completion") {
              response.data.User.emailTemplates?.forEach((template) => {
                if (notification.id === template._id) {
                  SetuserEmailTemplateInterviewCompletetion(template.content)
                }
              })
            }
          })

          // Handle branding
          if (response.data.User.customBrandings) {
            response.data.User.customBrandings.forEach((branding) => {
              if (IntUserBrandingId === branding._id) {
                SetBrandingLogoUrl(branding.logoUrl)
              }
            })
          }
        }
      } catch (error) {
        console.error("Error fetching user data:", error.message)
      }
    }

    getCurrentUserData()
  }, [IntUseremail, IntUserBrandingId, notificationsfromInterview])

  // Enhanced auto-play video function
  const autoPlayVideo = useCallback(async (videoElement) => {
    if (!videoElement) return

    try {
      videoElement.currentTime = 0
      videoElement.muted = false

      const playPromise = videoElement.play()

      if (playPromise !== undefined) {
        await playPromise
        console.log("Video autoplay successful")
      }
    } catch (error) {
      console.warn("Autoplay failed, trying fallback:", error)

      try {
        videoElement.muted = true
        await videoElement.play()

        setTimeout(() => {
          videoElement.muted = false
        }, 500)
      } catch (fallbackError) {
        console.log("Manual play required:", fallbackError)
        videoElement.controls = true

        showAlert({
          type: "info",
          title: "Please Play Video",
          message: "Click the play button to start the question video.",
          autoClose: 3000,
        })
      }
    }
  }, [])

  // Initialize question timing when step changes
  useEffect(() => {
    if (step > 0 && step <= QuesionLength) {
      Interview.forEach((interviewData) => {
        if (InterviewId === interviewData._id) {
          const questionData = interviewData.questions.find((q) => q.id === step)
          if (questionData) {
            const timing = getQuestionTiming(questionData, interviewData)
            setCurrentQuestion(questionData)
            setThinkingTime(timing.thinkingSeconds)
            setAnswerTime(timing.answerSeconds)
            setRetakesLeft(timing.retakesAllowed)
            setQuestionStarted(true)
            setIsThinking(false)
            setIsAnswering(false)
            setIsRecording(false)

            // Auto-play video with enhanced handling
            setTimeout(() => {
              if (videoRef.current) {
                autoPlayVideo(videoRef.current)
              }
            }, 200)

            // Start 6-second countdown for reading the question
            setIsCountingDown(true)
            setCountdown(6)

            const countdownInterval = setInterval(() => {
              setCountdown((prev) => {
                if (prev <= 1) {
                  clearInterval(countdownInterval)
                  setIsCountingDown(false)
                  setIsThinking(true)

                  // Clear any existing thinking timer
                  if (thinkingTimerRef.current) {
                    clearInterval(thinkingTimerRef.current)
                  }

                  // Start thinking timer with proper countdown
                  thinkingTimerRef.current = setInterval(() => {
                    setThinkingTime((prevTime) => {
                      if (prevTime <= 1) {
                        clearInterval(thinkingTimerRef.current)
                        setIsThinking(false)
                        // Auto-open camera popup after thinking time
                        setTimeout(() => openCameraPopup(), 100)
                        return 0
                      }
                      return prevTime - 1
                    })
                  }, 1000)

                  return 0
                }
                return prev - 1
              })
            }, 1000)
          }
        }
      })
    }
  }, [step, Interview, InterviewId, QuesionLength, getQuestionTiming, autoPlayVideo])

  // Handle early recording (during thinking time)
  const handleEarlyRecording = useCallback(() => {
    // Clear thinking timer
    if (thinkingTimerRef.current) {
      clearInterval(thinkingTimerRef.current)
      thinkingTimerRef.current = null
    }

    // Stop thinking phase
    setIsThinking(false)
    setThinkingTime(0)

    // Start recording immediately
    openCameraPopup()
  }, [])

  // Fixed start answer timer with proper countdown
  const startAnswerTimer = useCallback(() => {
    if (answerTime > 0) {
      setIsAnswering(true)

      if (timerRef.current) {
        clearInterval(timerRef.current)
      }

      // Start countdown timer that updates every second
      timerRef.current = setInterval(() => {
        setAnswerTime((prev) => {
          if (prev <= 1) {
            clearInterval(timerRef.current)
            setIsAnswering(false)
            if (mediaRecorderRef.current && mediaRecorderRef.current.state !== "inactive") {
              mediaRecorderRef.current.stop()
            }
            return 0
          }
          return prev - 1
        })
      }, 1000)
    }
  }, [answerTime])

  // Clean up timers
  useEffect(() => {
    return () => {
      if (timerRef.current) clearInterval(timerRef.current)
      if (thinkingTimerRef.current) clearInterval(thinkingTimerRef.current)
    }
  }, [])

  // Format time for display
  const formatTime = useCallback((timeInSeconds) => {
    const minutes = Math.floor(timeInSeconds / 60)
      .toString()
      .padStart(2, "0")
    const seconds = (timeInSeconds % 60).toString().padStart(2, "0")
    return `${minutes}:${seconds}`
  }, [])

  // Format progress percentage
  const formatProgress = useCallback((current, total) => {
    if (total === 0) return 0
    return Math.round((current / total) * 100)
  }, [])

  // Fixed show alert function
  const showAlert = useCallback((config) => {
    setAlertConfig(config)
    setShowAlertModal(true)
  }, [])

  // Fixed close alert function
  const closeAlert = useCallback(() => {
    setShowAlertModal(false)
  }, [])

  // Record violation
  const recordViolation = useCallback(
    (type, description) => {
      const violation = {
        type,
        description,
        timestamp: new Date().toISOString(),
        questionNumber: step,
      }

      setViolations((prev) => [...prev, violation])
      setViolationCount((prev) => prev + 1)

      console.log(`VIOLATION RECORDED: ${type} - ${description}`)

      return violation
    },
    [step],
  )

  // Enhanced anti-cheat system with proper violation tracking
  const setupAntiCheat = useCallback(() => {
    console.log("Setting up anti-cheat system...");

    // Fullscreen enforcement
    const enforceFullscreen = async () => {
      try {
        if (document.documentElement.requestFullscreen) {
          await document.documentElement.requestFullscreen();
        } else if (document.documentElement.webkitRequestFullscreen) {
          await document.documentElement.webkitRequestFullscreen();
        } else if (document.documentElement.msRequestFullscreen) {
          await document.documentElement.msRequestFullscreen();
        }
        setIsFullscreen(true);
      } catch (error) {
        console.error("Fullscreen error:", error);
      }
    };

    // Monitor fullscreen changes
    const handleFullscreenChange = () => {
      const isCurrentlyFullscreen = !!(
        document.fullscreenElement ||
        document.webkitFullscreenElement ||
        document.msFullscreenElement
      );

      setIsFullscreen(isCurrentlyFullscreen);

      if (interviewStarted && !isCurrentlyFullscreen) {
        const violation = recordViolation("FULLSCREEN_EXIT", "User exited fullscreen mode");

        if (violationCount + 1 >= 3) {
          terminateInterview("Multiple fullscreen violations detected", [...violations, violation]);
        } else {
          showAlert({
            type: "warning",
            title: "⚠️ Fullscreen Required",
            message: `Please return to fullscreen mode immediately. Warning ${violationCount + 1}/3`,
            autoClose: 4000,
          });
          setTimeout(enforceFullscreen, 1000);
        }
      }
    };

    // Monitor tab switching
    const handleVisibilityChange = () => {
      if (interviewStarted && document.hidden) {
        const violation = recordViolation("TAB_SWITCH", "User switched to another tab/window");

        if (violationCount + 1 >= 3) {
          terminateInterview("Multiple tab switching violations detected", [...violations, violation]);
        } else {
          showAlert({
            type: "warning",
            title: "⚠️ Stay on This Tab",
            message: `Tab switching detected. Warning ${violationCount + 1}/3`,
            autoClose: 4000,
          });
        }
      }
    };

    // Block restricted keys with comprehensive detection
    const handleKeyDown = (e) => {
      if (!interviewStarted) return;

      let violationType = null;
      let description = "";

      // Check for restricted single keys
      const restrictedKeys = ["F12", "F11", "F5", "PrintScreen", "Insert", "Delete"];
      if (restrictedKeys.includes(e.key)) {
        violationType = "RESTRICTED_KEY";
        description = `Attempted to use restricted key: ${e.key}`;
      }

      // Check for restricted key combinations
      const restrictedCombinations = [
        { ctrl: true, key: "c", desc: "Copy (Ctrl+C)" },
        { ctrl: true, key: "v", desc: "Paste (Ctrl+V)" },
        { ctrl: true, key: "x", desc: "Cut (Ctrl+X)" },
        { ctrl: true, key: "a", desc: "Select All (Ctrl+A)" },
        { ctrl: true, key: "s", desc: "Save (Ctrl+S)" },
        { ctrl: true, key: "p", desc: "Print (Ctrl+P)" },
        { ctrl: true, key: "r", desc: "Refresh (Ctrl+R)" },
        { ctrl: true, key: "f", desc: "Find (Ctrl+F)" },
        { ctrl: true, key: "h", desc: "History (Ctrl+H)" },
        { ctrl: true, key: "j", desc: "Downloads (Ctrl+J)" },
        { ctrl: true, key: "u", desc: "View Source (Ctrl+U)" },
        { ctrl: true, shift: true, key: "i", desc: "Developer Tools (Ctrl+Shift+I)" },
        { ctrl: true, shift: true, key: "j", desc: "Console (Ctrl+Shift+J)" },
        { ctrl: true, shift: true, key: "c", desc: "Inspector (Ctrl+Shift+C)" },
        { ctrl: true, shift: true, key: "delete", desc: "Clear Data (Ctrl+Shift+Delete)" },
        { alt: true, key: "tab", desc: "Alt+Tab" },
        { alt: true, key: "f4", desc: "Alt+F4" },
        { meta: true, key: "tab", desc: "Cmd+Tab" },
      ];

      for (const combo of restrictedCombinations) {
        const ctrlMatch = combo.ctrl ? e.ctrlKey : !e.ctrlKey;
        const shiftMatch = combo.shift ? e.shiftKey : !combo.shift || !e.shiftKey;
        const altMatch = combo.alt ? e.altKey : !e.altKey;
        const metaMatch = combo.meta ? e.metaKey : !e.metaKey;
        const keyMatch = e.key.toLowerCase() === combo.key.toLowerCase();

        if (ctrlMatch && shiftMatch && altMatch && metaMatch && keyMatch) {
          violationType = "RESTRICTED_COMBINATION";
          description = `Attempted restricted combination: ${combo.desc}`;
          break;
        }
      }

      if (violationType) {
        e.preventDefault();
        e.stopPropagation();

        const violation = recordViolation(violationType, description);

        if (violationCount + 1 >= 3) {
          terminateInterview("Multiple keyboard violation attempts", [...violations, violation]);
        } else {
          showAlert({
            type: "warning",
            title: "⚠️ Action Blocked",
            message: `${description}. Warning ${violationCount + 1}/3`,
            autoClose: 3000,
          });
        }
      }
    };

    // Disable right-click
    const handleContextMenu = (e) => {
      if (interviewStarted) {
        e.preventDefault();
        const violation = recordViolation("RIGHT_CLICK", "Attempted to right-click");

        if (violationCount + 1 >= 3) {
          terminateInterview("Multiple right-click attempts", [...violations, violation]);
        } else {
          showAlert({
            type: "warning",
            title: "⚠️ Right-click Disabled",
            message: `Right-click is not allowed. Warning ${violationCount + 1}/3`,
            autoClose: 2000,
          });
        }
      }
    };

    // Disable text selection
    const handleSelectStart = (e) => {
      if (interviewStarted) {
        e.preventDefault();
      }
    };

    // Detect copy attempts
    const handleCopy = (e) => {
      if (interviewStarted) {
        e.preventDefault();
        const violation = recordViolation("COPY_ATTEMPT", "Attempted to copy content");

        if (violationCount + 1 >= 3) {
          terminateInterview("Multiple copy attempts", [...violations, violation]);
        } else {
          showAlert({
            type: "warning",
            title: "⚠️ Copy Disabled",
            message: `Copying is not allowed. Warning ${violationCount + 1}/3`,
            autoClose: 2000,
          });
        }
      }
    };

    // Add all event listeners
    document.addEventListener("fullscreenchange", handleFullscreenChange, true);
    document.addEventListener("webkitfullscreenchange", handleFullscreenChange, true);
    document.addEventListener("msfullscreenchange", handleFullscreenChange, true);
    document.addEventListener("visibilitychange", handleVisibilityChange, true);
    document.addEventListener("keydown", handleKeyDown, true);
    document.addEventListener("contextmenu", handleContextMenu, true);
    document.addEventListener("selectstart", handleSelectStart, true);
    document.addEventListener("copy", handleCopy, true);

    // Initial fullscreen
    enforceFullscreen();

    console.log("Anti-cheat system activated");

    // Return cleanup function
    return () => {
      document.removeEventListener("fullscreenchange", handleFullscreenChange, true);
      document.removeEventListener("webkitfullscreenchange", handleFullscreenChange, true);
      document.removeEventListener("msfullscreenchange", handleFullscreenChange, true);
      document.removeEventListener("visibilitychange", handleVisibilityChange, true);
      document.removeEventListener("keydown", handleKeyDown, true);
      document.removeEventListener("contextmenu", handleContextMenu, true);
      document.removeEventListener("selectstart", handleSelectStart, true);
      document.removeEventListener("copy", handleCopy, true);
      console.log("Anti-cheat system deactivated");
    };
  }, [interviewStarted, violationCount, violations, recordViolation, showAlert]);

  // Enhanced terminate interview for violations with proper data saving
  const terminateInterview = useCallback(
    async (reason, allViolations = violations) => {
      try {
        console.log("TERMINATING INTERVIEW:", reason);
        console.log("All violations:", allViolations);

        // Create answers with cheating status for all questions
        const cheatingAnswers = [];
        for (let i = 1; i <= QuesionLength; i++) {
          cheatingAnswers.push({
            id: i,
            AnswerVideo: "",
            status: "CHEATING_DETECTED",
            reason: reason,
            violations: allViolations,
          });
        }

        // Update candidate status with cheating data
        if (currentInvite) {
          const DataObj = {
            _id: currentInvite._id,
            InterviewId: currentInvite.InterviewId,
            SendingId: currentInvite.SendingId,
            Fname: currentInvite.Fname,
            Lname: currentInvite.Lname,
            Email: currentInvite.Email,
            Prefix: currentInvite.Prefix,
            MobileNumber: currentInvite.MobileNumber,
            Status: "CHEATING_DETECTED",
            CandidateAnswers: cheatingAnswers,
            InterviewCompletedDate: new Date().toLocaleString(),
            TerminationReason: reason,
            ViolationDetails: allViolations,
            TotalViolations: allViolations.length,
          };

          console.log("Saving cheating data to DB:", DataObj);
          await UpdateInviteCandidateApi(DataObj);
        }

        showAlert({
          type: "error",
          title: "🚫 Interview Terminated",
          message: "Your interview has been terminated due to multiple policy violations. All data has been recorded.",
          autoClose: 5000,
        });

        setTimeout(() => {
          window.close();
        }, 5000);
      } catch (error) {
        console.error("Error terminating interview:", error);
      }
    },
    [currentInvite, QuesionLength, violations, showAlert]
  );

  // Fixed camera and recording functionality
  const openCameraPopup = useCallback(async () => {
    if (isRecording) return;

    try {
      SetGiveAnswer("");
      setIsRecording(true);

      // Pause the video when recording starts
      if (videoRef.current) {
        videoRef.current.pause();
      }

      const constraints = {
        video: {
          width: { ideal: 1280 },
          height: { ideal: 720 },
          frameRate: { ideal: 30 },
          deviceId: selectedDevices?.camera ? { exact: selectedDevices.camera } : undefined,
        },
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          autoGainControl: true,
          deviceId: selectedDevices?.microphone ? { exact: selectedDevices.microphone } : undefined,
        },
      };

      const cameraStream = await navigator.mediaDevices.getUserMedia(constraints);

      if (!cameraStream) {
        throw new Error("Failed to access camera.");
      }

      // Optimize recording settings
      const options = {
        mimeType: "video/webm;codecs=vp8,opus",
        videoBitsPerSecond: 1000000,
        audioBitsPerSecond: 128000,
      };

      if (!MediaRecorder.isTypeSupported(options.mimeType)) {
        console.warn(`${options.mimeType} is not supported. Using fallback.`);
        options.mimeType = "video/webm";
      }

      const mediaRecorder = new MediaRecorder(cameraStream, options);
      mediaRecorderRef.current = mediaRecorder;
      const recordedChunks = [];

      mediaRecorder.ondataavailable = (event) => {
        if (event.data && event.data.size > 0) {
          recordedChunks.push(event.data);
        }
      };

      mediaRecorder.onstart = () => {
        console.log("Recording started.");
        startAnswerTimer();
      };

      mediaRecorder.onstop = async () => {
        try {
          showAlert({
            type: "success",
            title: "Submitting your response",
            message: "Your response is submitting.",
          });

          if (recordedChunks.length > 0) {
            const blob = new Blob(recordedChunks, { type: options.mimeType });
            const file = new File([blob], `question-${step}-answer.webm`, {
              type: blob.type,
            });

            // Upload to Cloudinary
            const cloudinaryUrl = await uploadToCloudinary(file);
            setCurrentRecordedVideo(cloudinaryUrl);

            if (cloudinaryUrl) {
              // Clear answer timer
              if (timerRef.current) {
                clearInterval(timerRef.current);
                setIsAnswering(false);
              }

              // Check if retakes are available
              if (retakesLeft > 0) {
                setShowRetakeModal(true);
              } else {
                // No retakes, save and continue
                saveAnswerAndContinue(cloudinaryUrl);
              }
            }
          }
        } catch (error) {
          console.error("Upload error:", error);
          showAlert({
            type: "error",
            title: "Upload Error",
            message: "Failed to upload video. Please try again.",
          });
        }

        // Stop camera stream
        cameraStream.getTracks().forEach((track) => track.stop());
        setShowRecordingModal(false);
        setIsRecording(false);
      };

      // Show recording modal
      setShowRecordingModal(true);
      setShowPrepCountdown(true);
      setPrepCountdown(3);

      // Start preparation countdown
      const prepInterval = setInterval(() => {
        setPrepCountdown((prev) => {
          if (prev <= 1) {
            clearInterval(prepInterval);
            setShowPrepCountdown(false);
            mediaRecorder.start();
            return 0;
          }
          return prev - 1;
        });
      }, 1000);
    } catch (error) {
      console.error("Camera access error:", error);
      showAlert({
        type: "error",
        title: "Camera Access Error",
        message: "Unable to access your camera. Please check your camera permissions and try again.",
      });
      setIsRecording(false);
    }
  }, [isRecording, selectedDevices, startAnswerTimer, showAlert, step, retakesLeft]);

  // Save answer and continue to next question
  const saveAnswerAndContinue = useCallback(
    (videoUrl) => {
      SetAnswerArray((prev) => [...prev, { id: step, AnswerVideo: videoUrl }]);

      showAlert({
        type: "success",
        title: "Answer Recorded!",
        message: "Your answer has been saved successfully.",
        autoClose: 1500,
      });

      SetSubmittingAnswer("");
      setTimeout(() => {
        setStep((prevStep) => prevStep + 1);
      }, 1500);
    },
    [step, showAlert],
  );

  // Handle retake decision
  const handleRetakeDecision = useCallback(
    (shouldRetake) => {
      setShowRetakeModal(false);

      if (shouldRetake) {
        // Decrease retakes and restart question
        setRetakesLeft((prev) => prev - 1);

        // Reset question state
        setIsThinking(false);
        setIsAnswering(false);
        setIsRecording(false);

        // Restart the question process
        setTimeout(() => {
          setIsCountingDown(true);
          setCountdown(6);

          const countdownInterval = setInterval(() => {
            setCountdown((prev) => {
              if (prev <= 1) {
                clearInterval(countdownInterval);
                setIsCountingDown(false);
                setIsThinking(true);

                // Reset thinking time
                const timing = getQuestionTiming(
                  currentQuestion,
                  Interview.find((i) => i._id === InterviewId),
                );
                setThinkingTime(timing.thinkingSeconds);
                setAnswerTime(timing.answerSeconds);

                // Start thinking timer
                thinkingTimerRef.current = setInterval(() => {
                  setThinkingTime((prevTime) => {
                    if (prevTime <= 1) {
                      clearInterval(thinkingTimerRef.current);
                      setIsThinking(false);
                      setTimeout(() => openCameraPopup(), 100);
                      return 0;
                    }
                    return prevTime - 1;
                  });
                }, 1000);

                return 0;
              }
              return prev - 1;
            });
          }, 1000);
        }, 500);
      } else {
        // Continue to next question
        saveAnswerAndContinue(currentRecordedVideo);
      }
    },
    [
      currentRecordedVideo,
      saveAnswerAndContinue,
      currentQuestion,
      Interview,
      InterviewId,
      getQuestionTiming,
      openCameraPopup,
    ],
  );

  // Handle stop recording
  const handleStopRecording = useCallback(() => {
    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== "inactive") {
      mediaRecorderRef.current.stop();
    }
  }, []);

  // Handle email verification
  const handleEmailVerification = useCallback(
    (email) => {
      const matchedInvite = Invites.find((item) => item.SendingId === id && item.Status === "Invited");

      if (matchedInvite && email === matchedInvite.Email) {
        setShowEmailModal(false);
        showAlert({
          type: "success",
          title: "Email Verified!",
          message: "You're ready to begin your interview.",
          autoClose: 1500,
        });
        return true;
      }
      return false;
    },
    [Invites, id, showAlert],
  );

  // Handle device selection
  const handleDevicesSelected = useCallback((devices) => {
    setSelectedDevices(devices);
    setShowDeviceModal(false);
    
    showAlert({
      type: "success",
      title: "Devices Configured!",
      message: "Your camera and microphone are ready.",
      autoClose: 1500,
    });
  }, [showAlert]);

  // Watch intro video
  const watchIntro = useCallback(() => {
    const video = document.getElementById("interview-video");

    if (video) {
      video.play().catch((error) => {
        console.error("Error while playing video:", error);
      });
    }

    SetWatchIntro("");
    SetWatchingIntro("open");
    setTimeout(() => {
      SetInterStart("open");
      SetWatchingIntro("");
    }, 5000);
  }, []);

  // Fixed start interview function
  const startInterviewFunction = useCallback(async () => {
    // Show device selection modal first
    setShowDeviceModal(true);
  }, []);

  // Start interview after device selection
  const proceedWithInterview = useCallback(async () => {
    if (!selectedDevices) {
      showAlert({
        type: "error",
        title: "Devices Required",
        message: "Please select your camera and microphone first.",
      });
      return;
    }

    // Setup anti-cheat measures
    const cleanupAntiCheat = setupAntiCheat();
    setInterviewStarted(true);

    // Show countdown with proper auto-close
    showAlert({
      type: "info",
      title: "Interview Starting",
      message: "Your interview will begin in 6 seconds. Please stay on this tab and do not press any keys.",
      autoClose: 6000,
    });

    // Start interview after countdown
    setTimeout(() => {
      setStep(1);
    }, 6000);

    // Store cleanup function
    return cleanupAntiCheat;
  }, [selectedDevices, setupAntiCheat, showAlert]);

  // Finish interview with optimized API calls
  const FinishInterview = useCallback(async () => {
    try {
      const formatDate = () => {
        const options = {
          year: "numeric",
          month: "long",
          day: "numeric",
          hour: "2-digit",
          minute: "2-digit",
          hour12: true,
        }

        const date = new Date();
        const formattedDate = date.toLocaleString("en-US", options);
        const [datePart, timePart] = formattedDate.split(", ");
        const time = timePart.toLowerCase();

        return `${datePart} at ${time}`;
      }

      for (const data of Invites) {
        if (id === data.SendingId) {
          const DataObj = {
            _id: data._id,
            InterviewId: data.InterviewId,
            SendingId: data.SendingId,
            Fname: data.Fname,
            Lname: data.Lname,
            Email: data.Email,
            Prefix: data.Prefix,
            MobileNumber: data.MobileNumber,
            Status: "Evaluate",
            CandidateAnswers: AnswerArray,
            InterviewCompletedDate: formatDate(),
          }

          // Optimized API call with Promise.all for parallel execution
          const [updateResponse, emailResponse] = await Promise.all([
            UpdateInviteCandidateApi(DataObj),
            userEmailTemplateInterviewCompletetion
              ? axios.post("http://localhost:4000/api/InviteCandidate/SendInterviewCompletetionMsg", {
                email: IntUseremail,
                content: userEmailTemplateInterviewCompletetion,
              })
              : Promise.resolve({ status: 200 }),
          ])

          if (updateResponse.status === 200) {
            showAlert({
              type: "success",
              title: "Interview Completed",
              message: "Thank you for completing your interview!",
              autoClose: 2000,
            });

            setTimeout(() => {
              setStep(0);
              window.location.reload();
            }, 2000);
          } else {
            showAlert({
              type: "error",
              title: "Submission Failed",
              message: updateResponse.data.Message || "Failed to submit interview. Please try again.",
            });
          }
          break;
        }
      }
    } catch (error) {
      console.error("Error finishing interview:", error);
      showAlert({
        type: "error",
        title: "Submission Error",
        message: "An error occurred while submitting your interview. Please try again.",
      });
    }
  }, [Invites, id, AnswerArray, showAlert, userEmailTemplateInterviewCompletetion, IntUseremail]);

  // Handle interview completion
  if (step === QuesionLength + 1) {
    FinishInterview();
    return null;
  }

  // Loading state
  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 flex items-center justify-center p-4">
        <div className="bg-white/95 backdrop-blur-lg rounded-3xl shadow-2xl p-8 max-w-sm w-full mx-auto border border-gray-100">
          <div className="flex flex-col items-center justify-center">
            <div className="w-20 h-20 relative mb-8">
              <div className="absolute inset-0 rounded-full border-4 border-blue-100"></div>
              <div className="absolute inset-0 rounded-full border-4 border-t-transparent border-blue-600 animate-spin"></div>
            </div>
            <h2 className="text-2xl font-bold text-gray-800 mb-3 text-center">Preparing Interview</h2>
            <p className="text-gray-600 text-center mb-8 max-w-xs text-sm leading-relaxed">Setting up your interview environment and loading questions...</p>
            <div className="w-full bg-gray-200 rounded-full h-2 mb-3">
              <div className="bg-gradient-to-r from-blue-600 to-indigo-600 h-2 rounded-full w-3/4 animate-pulse"></div>
            </div>
            <div className="flex items-center text-xs text-gray-500">
              <div className="w-2 h-2 bg-blue-600 rounded-full animate-pulse mr-2"></div>
              <span>Loading interview data...</span>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50">
      {/* Modals */}
      <EmailVerificationModal
        isOpen={showEmailModal}
        onClose={() => setShowEmailModal(false)}
        onVerify={handleEmailVerification}
        inviteEmail={Invites.find((item) => item.SendingId === id)?.Email || ""}
      />

      <DeviceSelectionModal
        isOpen={showDeviceModal}
        onClose={() => setShowDeviceModal(false)}
        onDevicesSelected={handleDevicesSelected}
      />

      <RecordingModal
        isOpen={showRecordingModal}
        onClose={() => setShowRecordingModal(false)}
        onStopRecording={handleStopRecording}
        answerTime={answerTime}
        prepCountdown={prepCountdown}
        showPrepCountdown={showPrepCountdown}
        mediaRecorderRef={mediaRecorderRef}
        selectedDevices={selectedDevices}
      />

      <RetakeModal
        isOpen={showRetakeModal}
        onRetake={() => handleRetakeDecision(true)}
        onContinue={() => handleRetakeDecision(false)}
        retakesLeft={retakesLeft}
      />

      <AlertModal
        isOpen={showAlertModal}
        onClose={closeAlert}
        type={alertConfig.type}
        title={alertConfig.title}
        message={alertConfig.message}
        autoClose={alertConfig.autoClose}
      />

      {/* Header */}
      <header className="bg-white/95 backdrop-blur-lg py-4 px-4 sm:px-6 border-b border-gray-200 sticky top-0 z-40 shadow-sm">
        <div className="container mx-auto flex items-center justify-between">
          <div className="flex items-center">
            <div className="text-2xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent">
              {BrandingLogoUrl ? (
                <img src={BrandingLogoUrl || "/placeholder.svg"} alt="branding image" className="w-20 h-auto" />
              ) : (
                "Career Flix"
              )}
            </div>
            <div className="hidden md:flex items-center ml-6 space-x-2">
              <div className="h-1 w-1 rounded-full bg-blue-600"></div>
              <span className="text-sm font-medium text-gray-600">Video Interview Platform</span>
            </div>
          </div>

          <div className="flex items-center space-x-3 sm:space-x-4">
            {step > 0 && step <= QuesionLength && (
              <div className="hidden sm:flex items-center">
                <div className="flex items-center space-x-2 px-3 py-2 bg-blue-50 rounded-xl border border-blue-200">
                  <div className="w-2 h-2 rounded-full bg-blue-600 animate-pulse"></div>
                  <span className="text-sm font-semibold text-blue-700">
                    Question {step} of {QuesionLength}
                  </span>
                </div>
              </div>
            )}

            {/* Enhanced Anti-cheat indicator */}
            {interviewStarted && (
              <div className="flex items-center space-x-2 px-3 py-2 bg-gray-50 rounded-xl border border-gray-200">
                <div
                  className={`w-3 h-3 rounded-full ${isFullscreen ? "bg-green-500" : "bg-red-500"} animate-pulse`}
                ></div>
                <span className="text-xs text-gray-600 font-medium">
                  Violations: {violationCount}/3
                </span>
                {violationCount > 0 && <div className="w-2 h-2 bg-red-500 rounded-full animate-ping"></div>}
              </div>
            )}

            <div className="relative">
              {step > 0 ? (
                <div className="w-12 h-12 rounded-full bg-gradient-to-r from-blue-600 to-indigo-600 flex items-center justify-center text-white font-bold shadow-lg">
                  <span className="text-sm">{formatProgress(step, QuesionLength)}%</span>
                </div>
              ) : (
                <div className="w-10 h-10 rounded-full bg-gradient-to-r from-blue-600 to-indigo-600 flex items-center justify-center text-white font-bold shadow-md">
                  <User className="w-5 h-5" />
                </div>
              )}
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="container mx-auto px-4 py-6 sm:py-8">
        {/* Welcome Screen */}
        {step === 0 &&
          Interview.map((data) => {
            if (InterviewId === data._id) {
              return (
                <div
                  className="bg-white rounded-3xl shadow-2xl overflow-hidden lg:flex lg:h-[600px] transform transition-all duration-300 hover:shadow-3xl"
                  key="welcome"
                >
                  {/* Video Section */}
                  <div className="lg:w-3/5 relative bg-gray-900">
                    <div className="h-64 sm:h-80 lg:h-full">
                      <video
                        id="interview-video"
                        className="w-full h-full object-cover"
                        src={data.interviewStart.video}
                        controls
                        poster="/api/placeholder/800/600"
                      />
                    </div>
                    <div className="absolute top-4 left-4 bg-white/95 backdrop-blur-sm px-4 py-2 rounded-xl shadow-lg">
                      <div className="flex items-center space-x-2">
                        <Video className="w-4 h-4 text-blue-600" />
                        <span className="text-sm font-semibold text-gray-800">Introduction Video</span>
                      </div>
                    </div>
                  </div>

                  {/* Info Section */}
                  <div className="lg:w-2/5 p-6 sm:p-8 flex flex-col bg-gradient-to-br from-white to-blue-50/30">
                    <div>
                      <div className="inline-flex items-center px-4 py-2 rounded-xl text-sm font-semibold bg-blue-100 text-blue-800 mb-6">
                        <Mic className="w-4 h-4 mr-2" />
                        Video Interview
                      </div>

                      <h1 className="text-2xl sm:text-3xl font-bold text-gray-900 mb-4 leading-tight">
                        {data.interviewStart.title}
                      </h1>

                      <div className="space-y-4 mb-8">
                        <div className="flex items-start">
                          <div className="flex-shrink-0 mt-1">
                            <div className="w-10 h-10 rounded-xl bg-blue-100 flex items-center justify-center">
                              <Clock className="w-5 h-5 text-blue-600" />
                            </div>
                          </div>
                          <div className="ml-4">
                            <h3 className="text-sm font-semibold text-gray-900">Duration</h3>
                            <p className="text-sm text-gray-600">Approximately {data.questions.length * 3} minutes</p>
                          </div>
                        </div>

                        <div className="flex items-start">
                          <div className="flex-shrink-0 mt-1">
                            <div className="w-10 h-10 rounded-xl bg-green-100 flex items-center justify-center">
                              <AlertCircle className="w-5 h-5 text-green-600" />
                            </div>
                          </div>
                          <div className="ml-4">
                            <h3 className="text-sm font-semibold text-gray-900">Questions</h3>
                            <p className="text-sm text-gray-600">{data.questions.length} questions to answer</p>
                          </div>
                        </div>

                        <div className="flex items-start">
                          <div className="flex-shrink-0 mt-1">
                            <div className="w-10 h-10 rounded-xl bg-purple-100 flex items-center justify-center">
                              <Shield className="w-5 h-5 text-purple-600" />
                            </div>
                          </div>
                          <div className="ml-4">
                            <h3 className="text-sm font-semibold text-gray-900">Privacy</h3>
                            <p className="text-sm text-gray-600">Responses are securely stored</p>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="mt-auto space-y-4">
                      {WatchIntro.length > 0 && (
                        <button
                          onClick={watchIntro}
                          className="w-full py-3 px-6 bg-gradient-to-r from-red-600 to-pink-600 hover:from-red-700 hover:to-pink-700 text-white font-semibold rounded-xl transition-all duration-200 flex items-center justify-center shadow-lg transform hover:-translate-y-0.5"
                        >
                          <Play className="w-5 h-5 mr-2" />
                          Watch Introduction
                        </button>
                      )}

                      {WatchingIntro.length > 0 && (
                        <button className="w-full py-3 px-6 bg-blue-100 text-blue-800 font-semibold rounded-xl flex items-center justify-center cursor-not-allowed">
                          <div className="w-5 h-5 border-2 border-blue-600 border-t-transparent rounded-full animate-spin mr-2"></div>
                          Watching Introduction...
                        </button>
                      )}

                      {InterviewStart.length > 0 && (
                        <div className="space-y-4">
                          <button
                            onClick={startInterviewFunction}
                            className="w-full py-3 px-6 bg-gradient-to-r from-red-600 to-pink-600 hover:from-red-700 hover:to-pink-700 text-white font-semibold rounded-xl transition-all duration-200 flex items-center justify-center shadow-lg transform hover:-translate-y-0.5"
                          >
                            <Play className="w-5 h-5 mr-2" />
                            Start Interview
                          </button>

                          <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-2xl p-4 border border-blue-200">
                            <h3 className="font-semibold text-blue-800 mb-3 flex items-center text-sm">
                              <CheckCircle className="w-4 h-4 mr-2" />
                              Before you begin:
                            </h3>
                            <ul className="space-y-2">
                              <li className="flex items-start">
                                <div className="flex-shrink-0 w-5 h-5 rounded-full bg-green-100 flex items-center justify-center mt-0.5">
                                  <CheckCircle className="w-3 h-3 text-green-600" />
                                </div>
                                <span className="text-blue-700 ml-3 text-sm">Camera and microphone working</span>
                              </li>
                              <li className="flex items-start">
                                <div className="flex-shrink-0 w-5 h-5 rounded-full bg-green-100 flex items-center justify-center mt-0.5">
                                  <CheckCircle className="w-3 h-3 text-green-600" />
                                </div>
                                <span className="text-blue-700 ml-3 text-sm">Quiet, well-lit environment</span>
                              </li>
                              <li className="flex items-start">
                                <div className="flex-shrink-0 w-5 h-5 rounded-full bg-green-100 flex items-center justify-center mt-0.5">
                                  <CheckCircle className="w-3 h-3 text-green-600" />
                                </div>
                                <span className="text-blue-700 ml-3 text-sm">Stay on this tab until completion</span>
                              </li>
                            </ul>
                          </div>
                        </div>
                      )}

                      {selectedDevices && (
                        <button
                          onClick={proceedWithInterview}
                          className="w-full py-3 px-6 bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white font-semibold rounded-xl transition-all duration-200 flex items-center justify-center shadow-lg transform hover:-translate-y-0.5"
                        >
                          <Play className="w-5 h-5 mr-2" />
                          Begin Interview
                        </button>
                      )}
                    </div>
                  </div>
                </div>
              )
            }
            return null
          })}

        {/* Question Screens */}
        {step > 0 &&
          step <= QuesionLength &&
          Interview.map((item) => {
            if (InterviewId === item._id) {
              return item.questions.map((itemdata) => {
                if (step === itemdata.id) {
                  return (
                    <div
                      className="bg-white rounded-3xl shadow-2xl overflow-hidden lg:flex lg:h-[600px] transform transition-all duration-300 hover:shadow-3xl"
                      key={itemdata.id}
                    >
                      {/* Video Section */}
                      <div className="lg:w-3/5 relative bg-gray-900">
                        <div className="h-64 sm:h-80 lg:h-full">
                          <video
                            ref={videoRef}
                            className="w-full h-full object-cover"
                            src={itemdata.video}
                            autoPlay
                            controls
                            poster="/api/placeholder/800/600"
                          />
                        </div>

                        {/* Question indicator */}
                        <div className="absolute top-4 left-4 bg-white/95 backdrop-blur-sm px-4 py-2 rounded-xl shadow-lg">
                          <div className="flex items-center space-x-2">
                            <div className="w-2 h-2 bg-red-600 rounded-full animate-pulse"></div>
                            <span className="text-sm font-semibold text-gray-800">
                              Question {itemdata.id} of {QuesionLength}
                            </span>
                          </div>
                        </div>

                        {/* Progress indicator */}
                        <div className="absolute top-4 right-4">
                          <div className="inline-flex px-4 py-2 bg-blue-600 text-white rounded-xl shadow-lg">
                            <span className="text-sm font-semibold">{formatProgress(step, QuesionLength)}%</span>
                          </div>
                        </div>

                        {/* Countdown Display */}
                        {isCountingDown && (
                          <div className="absolute inset-0 bg-black/60 flex items-center justify-center">
                            <div className="text-center">
                              <div className="text-white text-6xl sm:text-8xl font-bold animate-pulse mb-4">{countdown}</div>
                              <p className="text-white text-lg sm:text-xl font-medium">Get ready to listen</p>
                            </div>
                          </div>
                        )}

                        {/* Timer Display */}
                        {isThinking && (
                          <div className="absolute bottom-4 right-4">
                            <div className="flex items-center space-x-2 bg-blue-600/90 backdrop-blur-sm text-white px-4 py-2 rounded-xl">
                              <Clock className="w-4 h-4" />
                              <span className="text-sm font-semibold">Think: {formatTime(thinkingTime)}</span>
                            </div>
                          </div>
                        )}

                        {/* Answer Timer Display */}
                        {isAnswering && (
                          <div className="absolute bottom-4 right-4">
                            <div className="flex items-center space-x-2 bg-red-600/90 backdrop-blur-sm text-white px-4 py-2 rounded-xl">
                              <Clock className="w-4 h-4 animate-pulse" />
                              <span className="text-sm font-semibold">Answer: {formatTime(answerTime)}</span>
                            </div>
                          </div>
                        )}
                      </div>

                      {/* Info Section */}
                      <div className="lg:w-2/5 p-6 sm:p-8 flex flex-col bg-gradient-to-br from-white to-blue-50/30">
                        <div className="mb-6">
                          <div className="inline-flex items-center px-4 py-2 rounded-xl text-sm font-semibold bg-blue-100 text-blue-800 mb-4">
                            <AlertCircle className="w-4 h-4 mr-2" />
                            Question {itemdata.id}
                          </div>

                          <h2 className="text-xl sm:text-2xl font-bold text-gray-900 mb-4">{itemdata.title}</h2>

                          <div className="prose prose-blue max-w-none mb-6">
                            <p className="text-gray-600 leading-relaxed">{itemdata.description}</p>
                          </div>

                          {/* Timer Info */}
                          {currentQuestion && (
                            <div className="bg-gradient-to-r from-gray-50 to-blue-50 rounded-2xl p-4 mb-4 border border-gray-200">
                              <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 text-sm">
                                <div className="flex items-center">
                                  <div className="w-3 h-3 bg-blue-500 rounded-full mr-3"></div>
                                  <span className="text-gray-700 font-medium">Think: {currentQuestion.Timetothink}</span>
                                </div>
                                <div className="flex items-center">
                                  <div className="w-3 h-3 bg-red-500 rounded-full mr-3"></div>
                                  <span className="text-gray-700 font-medium">Answer: {currentQuestion.Timetoanswer}</span>
                                </div>
                                <div className="flex items-center sm:col-span-2">
                                  <div className="w-3 h-3 bg-green-500 rounded-full mr-3"></div>
                                  <span className="text-gray-700 font-medium">Retakes: {retakesLeft} left</span>
                                </div>
                              </div>
                            </div>
                          )}
                        </div>

                        <div className="mt-auto space-y-4">
                          {/* Status Messages */}
                          {isCountingDown && (
                            <div className="bg-gradient-to-r from-yellow-50 to-orange-50 border border-yellow-200 rounded-2xl p-4">
                              <div className="text-center">
                                <p className="font-semibold text-yellow-800 text-lg">Get Ready!</p>
                                <p className="text-yellow-700 text-sm">Question starting in {countdown} seconds</p>
                              </div>
                            </div>
                          )}

                          {isThinking && (
                            <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-2xl p-4">
                              <div className="flex flex-col sm:flex-row items-center justify-between gap-4">
                                <div className="flex items-center">
                                  <div className="w-10 h-10 rounded-full bg-blue-100 flex items-center justify-center mr-3">
                                    <Clock className="w-5 h-5 text-blue-600" />
                                  </div>
                                  <div>
                                    <p className="font-semibold text-blue-800 text-sm">Thinking Time</p>
                                    <p className="text-blue-700 text-xs">Prepare your answer</p>
                                  </div>
                                </div>
                                <button
                                  onClick={handleEarlyRecording}
                                  className="px-4 py-2 bg-gradient-to-r from-red-600 to-pink-600 hover:from-red-700 hover:to-pink-700 text-white font-semibold rounded-xl transition-all duration-200 flex items-center shadow-lg text-sm"
                                >
                                  <Camera className="w-4 h-4 mr-2" />
                                  Record Now
                                </button>
                              </div>
                            </div>
                          )}

                          {/* Recording Status */}
                          {isAnswering && (
                            <div className="bg-gradient-to-r from-red-50 to-pink-50 border border-red-200 rounded-2xl p-4">
                              <div className="text-center">
                                <div className="flex items-center justify-center mb-2">
                                  <div className="w-3 h-3 bg-red-600 rounded-full animate-pulse mr-2"></div>
                                  <p className="font-semibold text-red-800 text-lg">Recording Answer</p>
                                </div>
                                <p className="text-red-700 text-sm">Time remaining: {formatTime(answerTime)}</p>
                              </div>
                            </div>
                          )}

                          {/* Action Buttons */}
                          {!isThinking && !isCountingDown && !showRecordingModal && !isAnswering && (
                            <button
                              onClick={openCameraPopup}
                              className="w-full py-3 px-6 bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white font-semibold rounded-xl transition-all duration-200 flex items-center justify-center shadow-lg transform hover:-translate-y-0.5"
                            >
                              <Camera className="w-5 h-5 mr-2" />
                              Record Your Answer
                            </button>
                          )}

                          {/* Tips */}
                          <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-2xl p-4 border border-blue-200">
                            <h3 className="font-semibold text-blue-800 mb-3 flex items-center text-sm">
                              <Lightbulb className="w-4 h-4 mr-2" />
                              Tips for a great answer:
                            </h3>
                            <ul className="space-y-2">
                              <li className="flex items-start">
                                <div className="flex-shrink-0 w-5 h-5 rounded-full bg-blue-100 flex items-center justify-center mt-0.5">
                                  <CheckCircle className="w-3 h-3 text-blue-600" />
                                </div>
                                <span className="text-blue-700 ml-3 text-sm">Speak clearly and at moderate pace</span>
                              </li>
                              <li className="flex items-start">
                                <div className="flex-shrink-0 w-5 h-5 rounded-full bg-blue-100 flex items-center justify-center mt-0.5">
                                  <CheckCircle className="w-3 h-3 text-blue-600" />
                                </div>
                                <span className="text-blue-700 ml-3 text-sm">Be concise but thorough</span>
                              </li>
                              <li className="flex items-start">
                                <div className="flex-shrink-0 w-5 h-5 rounded-full bg-blue-100 flex items-center justify-center mt-0.5">
                                  <CheckCircle className="w-3 h-3 text-blue-600" />
                                </div>
                                <span className="text-blue-700 ml-3 text-sm">Maintain eye contact with camera</span>
                              </li>
                            </ul>
                          </div>
                        </div>
                      </div>
                    </div>
                  )
                }
                return null
              })
            }
            return null
          })}

        {/* Not Invited Section */}
        {step === 200 && (
          <div className="bg-gradient-to-br from-blue-100 to-indigo-100 rounded-3xl overflow-hidden lg:flex lg:h-[600px] transform transition-all duration-300 hover:shadow-2xl">
            <div className="lg:w-3/5 relative flex items-center justify-center p-8">
              <div className="max-w-md">
                <img
                  className="w-full h-auto rounded-2xl transform transition-all duration-500 hover:scale-105 shadow-lg"
                  src={interviewcomplete}
                  alt="Interview illustration"
                />
              </div>
            </div>

            <div className="lg:w-2/5 p-6 sm:p-8 flex flex-col bg-gradient-to-br from-white to-blue-50/50">
              <div className="mb-6">
                <div className="inline-flex items-center px-4 py-2 rounded-xl text-sm font-semibold bg-blue-100 text-blue-800 mb-4">
                  <AlertCircle className="w-4 h-4 mr-2" />
                  Information
                </div>

                <h2 className="text-2xl sm:text-3xl font-bold text-gray-900 mb-4">Thank You for Your Interest</h2>

                <div className="prose prose-blue max-w-none mb-8">
                  <p className="text-gray-700 mb-4 leading-relaxed">
                    We appreciate your interest in participating in our interview process. However, we couldn't find an
                    active invitation associated with this link.
                  </p>
                  <p className="text-gray-700 leading-relaxed">
                    If you believe this is an error, please contact our support team for assistance.
                  </p>
                </div>
              </div>

              <div className="mt-auto space-y-4">
                <div className="bg-white rounded-2xl p-4 border border-gray-200 shadow-lg">
                  <h3 className="font-semibold text-gray-800 mb-4 flex items-center">
                    <Mail className="w-5 h-5 mr-2 text-blue-600" />
                    Contact Information
                  </h3>
                  <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl p-3 border border-blue-100">
                    <div className="flex items-center">
                      <div className="w-12 h-12 rounded-xl bg-blue-100 flex items-center justify-center mr-3">
                        <Mail className="w-6 h-6 text-blue-600" />
                      </div>
                      <div>
                        <p className="text-xs text-blue-700 font-medium">Email</p>
                        <p className="font-semibold text-blue-900 text-sm">support@careerflix.com</p>
                      </div>
                    </div>
                  </div>
                </div>

                <a
                  href="/"
                  className="block w-full py-3 px-6 bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white font-semibold rounded-xl transition-all duration-300 text-center shadow-lg transform hover:-translate-y-0.5"
                >
                  Return to Homepage
                </a>
              </div>
            </div>
          </div>
        )}
      </main>
    </div>
  )
}
